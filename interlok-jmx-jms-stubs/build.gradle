ext {
  componentName = "Interlok JMX/Stubs"
  componentDesc = "Test scaffolding for JMX Tests; of no use at Interlok runtime"
  jacksonVersion = "2.16.2"
  activeMqVersion = "5.17.6"
}

dependencies {
  api project(":interlok-jmx-jms-common")
  implementation ("org.junit.jupiter:junit-jupiter-engine:5.10.2")

  // since we depend on activemq-broker, we have to include jackson because
  // it's transitive
  // Dependency to platform/BOM
  implementation (platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
  implementation ("com.fasterxml.jackson.core:jackson-databind")
  implementation ("com.fasterxml.jackson.core:jackson-core")

  implementation ("org.apache.activemq:activemq-broker:$activeMqVersion")
  implementation ("org.apache.activemq:activemq-jaas:$activeMqVersion")
  implementation ("org.apache.activemq:activemq-kahadb-store:$activeMqVersion")
  implementation ("org.apache.activemq:activemq-amqp:$activeMqVersion")
  implementation ("org.apache.activemq.protobuf:activemq-protobuf:1.1")
  implementation ("javax.management.j2ee:javax.management.j2ee-api:1.1.2")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
              "Build-Jdk": System.getProperty('java.version'),
              "Implementation-Title": componentName,
              "Implementation-Version": project.version,
              "Implementation-Vendor-Id": project.group,
              "Implementation-Vendor": organizationName)
  }
}
artifacts {
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/pages/advanced/advanced-jmx-jms")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.10.0+")
        properties.appendNode("tags", "jmx,jms")
        properties.appendNode("license", "false")
        properties.appendNode("developerOnly", "true")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-jmx-jms")
        properties.appendNode("deprecated", "This component has been deprecated with no replacement and will be removed in a future version")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}
